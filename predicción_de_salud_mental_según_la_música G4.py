# -*- coding: utf-8 -*-
"""Predicción de Salud Mental según la Música.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A1cdkZU2nPeNjyApXwC7D3tsZOcgjBtu

# NoteBook Proyecto Final
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""Se carga el dataset para su posterior limpieza"""

df = pd.read_csv("mxmh_survey_results.csv")

"""Se imprime el dataset original"""

print(df.to_string(index=False))

"""Se eliminan columnas que no tienen gran impacto para el desarollo del proyecto

Se eliminaron las siguientes 7 columnas de la tabla debido a que no aportan de ninguna manera en la invstigacion.
"""

df = df.drop(columns=['Instrumentalist'])
df = df.drop(columns=['Composer'])
df = df.drop(columns=['Exploratory'])
df = df.drop(columns=['BPM'])
df = df.drop(columns=['Timestamp'])
df = df.drop(columns=['Foreign languages'])
df = df.drop(columns=['Permissions'])

"""Los datos de la tabla que usaremos para la investigacion son los siguientes:
Age: Edad del encuestado
Primary streaming service: Servicio de streaming principal del encuestado
Hours per day: Número de horas que el encuestado escucha música al día
While working: ¿Escucha el encuestado música mientras estudia/trabaja?
Fav genre: Género favorito o principal del encuestado
Frequency [Classical]: Frecuencia con la que el encuestado escucha música clásica
Frequency [Country]: Frecuencia con la que el encuestado escucha música country
Frequency [EDM]: Frecuencia con la que el encuestado escucha música EDM
Frequency [Folk]: Frecuencia con la que el encuestado escucha música folk
Frequency [Gospel]: Frecuencia con la que el encuestado escucha música gospel
Frequency [Hip hop]: Frecuencia con la que el encuestado escucha música hip hop
Frequency [Jazz]: Frecuencia con la que el encuestado escucha música jazz
Frequency [K pop]: Frecuencia con la que el encuestado escucha música K pop
Frequency [Latin]: Frecuencia con la que el encuestado escucha música latina
Frequency [Lofi]: Frecuencia con la que el encuestado escucha música lofi
Frequency [Metal]: Frecuencia con la que el encuestado escucha música metal
Frequency [Pop]: Frecuencia con la que el encuestado escucha música pop
Frequency [R&B]: Frecuencia con la que el encuestado escucha música R&B
Frequency [Rap]: Frecuencia con la que el encuestado escucha música rap
Frequency [Rock]: Frecuencia con la que el encuestado escucha música rock
Frequency [Video game music]: Frecuencia con la que el encuestado escucha música de videojuegos
Anxiety: Ansiedad autoinformada, en una escala del 0 al 10
Depression: Depresión autoinformada, en una escala del 0 al 10
Insomnia: Insomnio autoinformado, en una escala del 0 al 10
OCD: Trastorno obsesivo-compulsivo autoinformado, en una escala del 0 al 10
Music effects: ¿La música mejora/empeora las condiciones de salud mental del encuestado?

Se hace un histograma de la columna "Age", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna.
"""

plt.hist(df['Age'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna Age')

# Mostrar el histograma
plt.show()

"""Se observo que para los valores mayores a 70 hay muy poca frecuencia comparado con la frecuencia vista en los valores menores a 70."""

resultados = df[df['Age'] > 70]

print(resultados.to_string(index=False))

"""Se eliminan los datos donde lo valores de la columna "Age" es mayor a 70"""

# Filtrar y eliminar valores mayores a 75 en una columna específica
columna = 'Age'
df = df.loc[df[columna] <= 70]

"""Se hace un diagrama de pastel de la columna "Primary streaming service", para poder observar de otra manera la distribucion de los valores"""

s_colors = ['lightgreen', 'lightcoral', 'steelblue', 'palevioletred', 'gold', 'darkturquoise']

services = df['Primary streaming service'].value_counts()
services.plot(kind='pie', colors = s_colors)

plt.title('Streaming services by popularity')
plt.ylabel("")

"""Ahora se saca una lista de con los valores de la columna "Primary streaming service"
"""

streaming_services = df['Primary streaming service'].unique()

# Mostrar los vlores
print(streaming_services)

"""Se intercambian los valores  de la columna "Primary streaming service" por valores numericos"""

# Obtener los valores antes de la asignación de números
valores_antes = df['Primary streaming service'].unique()
# Crear un diccionario para asignar un número a cada valor, manejando los valores nulos
streaming_services = df['Primary streaming service'].dropna().unique()
mapeo_valores = {valor: i for i, valor in enumerate(streaming_services)}
# Aplicar la asignación de números a la columna
df.loc[:, 'Primary streaming service'] = df['Primary streaming service'].map(mapeo_valores)

# Imprimir los valores que se intercambiaron
print(mapeo_valores)

"""Se hace un histograma de la columna "Primary streaming service", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['Primary streaming service'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna Primary streaming service')

# Mostrar el histograma
plt.show()

resultados = df[(df['Primary streaming service'] >= 1) & (df['Primary streaming service'] < 2)]

print(resultados.to_string(index=False))

"""Debido a que la fecuencia de pandora es tan baja borraremos esta variable."""

columna = 'Primary streaming service'
df = df.loc[df[columna] != 1]

"""Se hace un histograma de la columna "Hours per day", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['Hours per day'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna Hours per day')

# Mostrar el histograma
plt.show()

"""Se observa que para los valores mayores a 15 hay muy poca frecuencia comparado con la frecuencia vista en los valores menores a 15."""

resultados = df[df['Hours per day'] > 15]

print(resultados.to_string(index=False))

"""Se eliminan los datos donde lo valores de la columna "Hours per day" es mayor a 15"""

# Filtrar y eliminar valores mayores a 75 en una columna específica
columna = 'Hours per day'
df = df.loc[df[columna] < 15]

"""Se hace un diagrama de pastel de la columna "While working", para poder observar de otra manera la distribucion de los valores"""

s_colors = ['lightgreen', 'lightcoral']

services = df['While working'].value_counts()
services.plot(kind='pie', colors = s_colors)

plt.title('While working')
plt.ylabel("")

"""Ahora se saca una lista de con los valores de la columna "While working"
"""

While_working = df['While working'].unique()

# Mostrar los vlores
print(While_working)

"""Se intercambian los valores de la columna "'While working" por valores numericos"""

# Obtener los valores antes de la asignación de números
valores_antes = df['While working'].unique()
# Crear un diccionario para asignar un número a cada valor, manejando los valores nulos
While_working = df['While working'].dropna().unique()
mapeo_valores = {valor: i for i, valor in enumerate(While_working)}
# Aplicar la asignación de números a la columna
df.loc[:, 'While working'] = df['While working'].map(mapeo_valores)

# Imprimir los valores que se intercambiaron
print(mapeo_valores)

"""Se hace un histograma de la columna "While working", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['While working'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna While working')

# Mostrar el histograma
plt.show()

"""Se hace un diagrama de pastel de la columna "Fav genre", para poder observar de otra manera la distribucion de los valores

"""

valores = df['Fav genre'].unique()
# Gestionar los colores con seaborn
paleta_colores = sns.color_palette("husl", len(valores))

# Convertir los colores de la paleta en formato hexadecimal
lista_colores = paleta_colores.as_hex()
services = df['Fav genre'].value_counts()
services.plot(kind='pie', colors = lista_colores)

plt.title('Fav genre')
plt.ylabel("")

"""Ahora se saca una lista de con los valores de la columna "Fav genre"
"""

fav = df['Fav genre'].unique()

# Mostrar los vlores
print(fav)

"""Se intercambian los valores de la columna "Fav genre" por valores numericos"""

# Obtener los valores antes de la asignación de números
valores_antes = df['Fav genre'].unique()
# Crear un diccionario para asignar un número a cada valor, manejando los valores nulos
streaming_services = df['Fav genre'].dropna().unique()
mapeo_valores = {valor: i for i, valor in enumerate(streaming_services)}
# Aplicar la asignación de números a la columna
df.loc[:, 'Fav genre'] = df['Fav genre'].map(mapeo_valores)

# Imprimir los valores que se intercambiaron
print(mapeo_valores)

"""Se hace un histograma de la columna "Fav genre", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['Fav genre'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la Fav genre')

# Mostrar el histograma
plt.show()

"""Se hace un diagrama de pastel de todas las columnas "Frequency [genero]", para poder observar de otra manera la distribucion de los valores"""

columnas_frecuencia = [columna for columna in df.columns if columna.startswith('Frequency')]
for columna in columnas_frecuencia:
    valores = df[columna].unique()
    paleta_colores = sns.color_palette("husl", len(valores))
    lista_colores = paleta_colores.as_hex()
    services = df[columna].value_counts()
    services.plot(kind='pie', colors=lista_colores)
    plt.title(columna)
    plt.ylabel("")
    plt.show()

"""Ahora se saca una lista de con los valores para cada columna "Frequency [genero]"

---


"""

columnas_frecuencia = [columna for columna in df.columns if columna.startswith('Frequency')]
for columna in columnas_frecuencia:
    valores = df[columna].unique()
    print(f"Valores únicos de {columna}: {valores}")

"""Mapear los valores de cada columna en columnas_frecuencia a números enteros"""

columnas_frecuencia = [columna for columna in df.columns if columna.startswith('Frequency')]
for columna in columnas_frecuencia:
    valores_antes = df[columna].unique()
    streaming_services = df[columna].dropna().unique()
    mapeo_valores = {valor: i for i, valor in enumerate(streaming_services)}
    df.loc[:, columna] = df[columna].map(mapeo_valores)
    print(f"Mapeo de valores para {columna}: {mapeo_valores}")

"""Se hace un histograma a cada columna "Frequency [genero]", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna.

"""

columnas_frecuencia = [columna for columna in df.columns if columna.startswith('Frequency')]
for columna in columnas_frecuencia:
    plt.hist(df[columna], bins=10, color='blue', edgecolor='black')
    plt.xlabel('Valores')
    plt.ylabel('Frecuencia')
    plt.title(f'Histograma de la columna {columna}')
    plt.show()

"""Se eliminan los datos donde lo valores de la columna "Frecuency[Gospel]" es mayor a 2"""

# Filtrar y eliminar valores mayores a 75 en una columna específica
columna = 'Frequency [Gospel]'
df = df.loc[df[columna] > 2]

"""Se hace un histograma de la columna "Anxiety", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['Anxiety'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna Anxiety')

# Mostrar el histograma
plt.show()

"""Se hace un histograma de la columna "Depression", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['Depression'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna Depression')

# Mostrar el histograma
plt.show()

"""Se hace un histograma de la columna "Insomnia", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['Insomnia'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna Insomnia')

# Mostrar el histograma
plt.show()

"""Se hace un histograma de la columna "OCD", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['OCD'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna OCD')

# Mostrar el histograma
plt.show()

"""Se intercambian los valores de la columna "Music effects" por valores numericos"""

# Obtener los valores antes de la asignación de números
valores_antes = df['Music effects'].unique()
# Crear un diccionario para asignar un número a cada valor, manejando los valores nulos
streaming_services = df['Music effects'].dropna().unique()
mapeo_valores = {valor: i for i, valor in enumerate(streaming_services)}
# Aplicar la asignación de números a la columna
df.loc[:, 'Music effects'] = df['Music effects'].map(mapeo_valores)

# Imprimir los valores que se intercambiaron
print(mapeo_valores)

"""Se hace un histograma de la columna "Music effects", para poder observar la frecuencia en la que aparecen los disitntos valores de la columna."""

plt.hist(df['Music effects'], bins=10, color='blue', edgecolor='black')

# Agregar etiquetas y título
plt.xlabel('Valores')
plt.ylabel('Frecuencia')
plt.title('Histograma de la columna Music effects')

# Mostrar el histograma
plt.show()

"""Se observa que para el valor de worsen (2) hay muy poca frecuencia comparado con la frecuencia vista en los demas valores."""

resultados = df[df['Music effects'] == 2]

print(resultados.to_string(index=False))

"""Como el valor de 'worsen' es muy bajo eliminamos ese dato"""

# Filtrar y eliminar valor 2
columna = 'Music effects'
df = df.loc[df[columna] != 2]